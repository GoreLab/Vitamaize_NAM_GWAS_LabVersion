rm(list = ls())

user <- 'cbk' #options are 'cbk' or 'chd'
effect.estimate <- 'Transformed'  #options are 'Transformed' or 'Untransformed'
##########################################################################
#inputs
 if(user == 'cbk'){
    setwd("C:\\Users\\ceb19\\Documents\\Gore Lab\\Carotenoid NAM Merged Env")
    home.dir <- getwd()
    trait.set <- "Carot" #Options are "Carot" or "tocos"
    location.of.modified.GAPIT.files <- "\\(21) GAPIT source files\\"
    location.of.transformed.effect.estimates <- "\\(9)JL Analysis\\Permutations\\Data_for_alpha01_new_TASSEL3\\Effect_estimates_TASSEL3_alpha01_2015\\"
    location.of.untransformed.effect.estimates <-
    location.of.GWAS.results <- "\\(10)GWAS Analysis\\RUV GWAS 25fam_alldata_alpha01_2015_FINAL\\"
    dir.for.compil.of.tri.summ = "\\(15)Correlated Expression\\Results_from_R_FPKM1_logtyes\\"
    output.dir <- "\\(15)Correlated Expression\\JL_GWAS_FPKM_overlap_analysis\\Results_from_R\\"
    get.me.my.SNPs.files.dir <- "\\(15)Correlated Expression\\JL_GWAS_FPKM_overlap_analysis\\Results_from_GMMS\\"
    FPKM.file.dir <- "\\(15)Correlated Expression\\"
    tabSummary.path <- "\\(31) Tabular Summary Info for 2015 analysis\\"
    
    #specify columns in tabSummary
      column.of.cSI.in.tab.sum <- 14
      column.of.GRZM.ID.in.tab.sum <- 12
      column.of.peak.marker.in.tab.sum <- 6
      column.of.trait.in.tab.sum <- 1
    
    tabular.summary <- read.table(paste(home.dir,tabSummary.path,"Tab_Sum_",trait.set,"_alpha.01_GWAS_FamPVE_common_SI_recsuppregions_LODscores_20150612.txt", sep = ""), head = TRUE)
    absolute.final.data.set.FPKM <- read.table(paste(home.dir,FPKM.file.dir,"FPKM.table.by.gene.ann.complete.matrix.FPKMthreshold.1_filter.by.kernel_across_all.samples.log2trans.txt", sep = ""), head = TRUE)
  }

 if(user == 'chd'){
  #Christine add in dependencies here
 }

#Source in the modified GAPIT files
setwd(paste(home.dir,location.of.modified.GAPIT.files,sep = ""))
source("GAPIT.Fragment.Modified.R")
source("GAPIT.HapMap.Modified.R")
source("GAPIT.Numericalization.Modified.R")
setwd(home.dir)
										
####################################################################################################################################
#Create reference dataframe with founder and pop number information
    pop.seq <- as.data.frame(as.factor(c("pop01", "pop02", "pop03", "pop04", "pop05", "pop06", "pop07", "pop08", 
                                         "pop09", "pop10", "pop11", "pop12", "pop13",
                                         "pop14", "pop15", "pop16", "pop18", "pop19", 
                                         "pop20", "pop21", "pop22", "pop23", "pop24", 
                                         "pop25", "pop26")))
    founder.names <- as.data.frame(c("B97", "CML103", "CML228", "CML247", "CML277", "CML322", "CML333", "CML52", 
                                     "CML69", "HP301", "IL14H", "KI11", "KI3", "KY21", "M162W", "M37W", "MO18W", 
                                     "MS71", "NC350", "NC358", "OH43", "OH7B", "P39", "TX303", "TZI8"))
    NAM.pops <- cbind(pop.seq, founder.names)
    colnames(NAM.pops) <- c("Pop.num", "Pop.Founders")


#For loop through each common S.I.(39 for carot, 48 for toco); Specify tri folder         
for(cSI in unique(tabular.summary[,column.of.cSI.in.tab.sum])){
    print(paste("For common support interval number ",cSI,":",sep=''))
  
    #Change dir to master output dir for this common S.I.; final files from this script will be placed here.
    if(user == 'cbk'){
    Common.SI.array = read.table(paste(home.dir,dir.for.compil.of.tri.summ,"Common_SI_array_for_tri_auto_June_2015.txt", sep = ""), head = TRUE)
    gene.abbrev <- Common.SI.array[which(Common.SI.array[,1] == cSI),5]
    setwd(paste(home.dir,dir.for.compil.of.tri.summ,"QTL_",cSI,"_imputed.ordered.tri.files.for.",gene.abbrev, sep=''))
    }
    
    if(user == 'chd'){
    setwd(paste(home.dir,dir.for.compil.of.tri.summ,"QTL_",cSI,"_imputed.ordered.tri.files", sep=''))
    }

    #identify all trait QTL in cSI
    all.trait.QTL <- tabular.summary[which(tabular.summary[,column.of.cSI.in.tab.sum] == cSI),]
    
    for(QTL in 1:nrow(all.trait.QTL)){
		    
        #obtain ID info about trait QTL
        trait <- as.character(all.trait.QTL[QTL,column.of.trait.in.tab.sum])
		    peak.marker <- as.character(all.trait.QTL[QTL,column.of.peak.marker.in.tab.sum])
		    GRZM.ID.vector <- as.vector(strsplit(as.character(all.trait.QTL[QTL,column.of.GRZM.ID.in.tab.sum]),",_"))[[1]]
		 
		    #obtain expression data for overlapping gene candidates from tab summary
        for(gene.candidate in GRZM.ID.vector){
		       
		       #scan FPKM file for candidate gene
            row.of.interest <- absolute.final.data.set.FPKM[(which(substr(absolute.final.data.set.FPKM[,1],1,13) == gene.candidate)),]
           
           #for candidates in the FPKM file, extract expression data, extract effect estimate data, generate scatter plot 
            if((nrow(row.of.interest) == 0) == TRUE){
                next}else{
               
              #obtain gene expression data           
                      #length for each entry = 221, data starts at [,6]
                      FPKM.vector <- row.of.interest[,6:ncol(row.of.interest)]
                      founder.names <- as.matrix(c("B73", "B97", "CML103", "CML228", "CML247", "CML277", "CML322", "CML333", "CML52", 
                                         "CML69", "HP301", "IL14H", "KI11", "KI3", "KY21", "M162W", "M37W", "MO17", "MO18W", 
                                         "MS71", "NC350", "NC358", "OH43", "OH7B", "P39", "TX303", "TZI8"))          
        
                      as.matrix(FPKM.vector) -> FPKM.vector
                      FPKM.matrix <- NULL
                      test.seq <- seq(1:27)
                                                     
                      for (i in test.seq){
                            #after every 8 columns of data, move to a new row
                            #can do this in a loop, where i is the number of iterations or founders, and multiplicative factor is 8  
                            temp.line.added <- NULL
                            start.of.line <- NULL
                            end.of.line <- NULL
                            start.of.line <- (i*8)-7
                            end.of.line <- i*8
                            temp.line.added <- FPKM.vector[,start.of.line:end.of.line]
                            #colnames(temp.line.added) <- NULL
                            FPKM.matrix <- rbind(FPKM.matrix, temp.line.added)
                      } #end i in test.seq
                      
                      colnames(FPKM.matrix) <- c("12_DAP", "16_DAP", "20_DAP", "24_DAP", "30_DAP", "36_DAP", "root", "shoot")   
                      rownames(FPKM.matrix) <- founder.names   
                      
                      FPKM.matrix.noB73 <-   FPKM.matrix[c(-1,-18),]
                    
              #obtain effect estimates
                     if(effect.estimate == 'Transformed'){
                        effect.estimates.from.entire.trait <- read.table(paste(home.dir,location.of.transformed.effect.estimates,
                                             "Pop.by.Marker.Effect.Estimates.from.R.",trait,".SI01_2015.txt", sep = ""),head = TRUE)             #note to CHD and CBK, file name input needed here
                                          
                        markerID <-  substr(effect.estimates.from.entire.trait[,1], 7,10000)
                        popID <- substr(effect.estimates.from.entire.trait[,1], 1,5)
                        
                        trans.effect.estimates.from.QTL <-data.frame(as.character(popID[which(markerID == peak.marker)]),
                                                        as.numeric(effect.estimates.from.entire.trait[which(markerID == peak.marker), 2]))
                                                        
                        colnames(trans.effect.estimates.from.QTL) <- c("Population","Trans.Est")
                        
                        trans.effect.estimates.from.QTL <- merge(trans.effect.estimates.from.QTL, NAM.pops, by.x = "Population", by.y = "Pop.num")
      
                     } #end transformed
                     
                     
                     if(effect.estimate == 'Untransformed'){
                        effect.estimates.from.entire.trait.2 <- read.table(paste(home.dir,location.of.untransformed.effect.estimates,
                                             "Pop.by.Marker.Effect.Estimates.from.R.",trait,".UNTRANS.SI01_2015.txt", sep = ""),head = TRUE)          #note to CHD and CBK, file name input needed here
                                          
                        markerID <-  substr(effect.estimates.from.entire.trait.2[,1], 7,10000)
                        popID <- substr(effect.estimates.from.entire.trait.2[,1], 1,5)
                        
                        untrans.effect.estimates.from.QTL <-data.frame(as.character(popID[which(markerID == peak.marker)]),
                                                        as.numeric(effect.estimates.from.entire.trait.2[which(markerID == peak.marker), 2]))
                                                        
                        colnames(untrans.effect.estimates.from.QTL) <- c("Population","Trans.Est")
                        
                        untrans.effect.estimates.from.QTL <- merge(untrans.effect.estimates.from.QTL, NAM.pops, by.x = "Population", by.y = "Pop.num")
                     } #end untransformed
              
              #generate scatter plots
                  #set effect estimates to be plotted
                      if(effect.estimate == 'Transformed'){
                          list.of.effect.estimates <- trans.effect.estimates.from.QTL
                          title.ID <- effect.estimate   
                      }
                      
                      if(effect.estimate == 'Untransformed'){
                          list.of.effect.estimates <- untrans.effect.estimates.from.QTL
                          title.ID <- effect.estimate 
                      }
              
                  #generated data matrix for plotting
                      all.data.for.scatter <- cbind(list.of.effect.estimates, FPKM.matrix.noB73)
                      min.x <- min(na.omit(all.data.for.scatter[,4:9]))
                      max.x <- max(na.omit(all.data.for.scatter[,4:9]))
                      min.y <- min(na.omit(all.data.for.scatter[,2]))
                      max.y <- max(na.omit(all.data.for.scatter[,2]))
                      
                    #set output directory       
                      if(user == 'cbk'){
                          setwd(paste(home.dir,dir.for.compil.of.tri.summ,"QTL_",cSI,"_imputed.ordered.tri.files.for.",gene.abbrev, sep=''))
                          }
                          
                      if(user == 'chd'){
                          setwd(paste(home.dir,dir.for.compil.of.tri.summ,"QTL_",cSI,"_imputed.ordered.tri.files", sep=''))
                          }
                    
                    #set title
                      jpeg(paste ("Expr_scatterplot_for_", gene.candidate, "_from_", trait, "_QTL", peak.marker, "_cSI", cSI, ".r.jpeg", sep=""), width = 6, height = 8, units = 'in', res = 300)
                    
                    #set plotting parameters  
                      par(mfrow=c(2,3))
                      #par(mfrow=c(2,3), pin=(.5,.5))
                      for (j in (4:9)){
                      
                              #generate linear regression for each plot
                              lin.reg <- lm(all.data.for.scatter[,2] ~ all.data.for.scatter[,j])
                              plot.corr <- round(cor(all.data.for.scatter[,2], all.data.for.scatter[,j], use = "pairwise.complete.obs", method = "pearson"),3)
                              
                              plot(all.data.for.scatter[,j], all.data.for.scatter[,2],
      
                                   main= paste("FPKM vs effects at ",colnames(all.data.for.scatter)[j], sep=""),
                                   xlim= c((min.x-0.1*min.x), (max.x+0.1*max.x)),
                                   ylim= c((min.y-0.1*min.y), (max.y+0.3*max.y)),
                                   xlab= "FPKM, log2",
                                   ylab= paste(title.ID,"Allele Effect Estimate", sep = " "),
                                   col= "blue", pch = 19, cex = 1, lty = "solid", lwd = 2)
                                   
                                   abline(lin.reg)
                                   
                                   #legend("topleft", bty="n", legend=paste("adjRsq: ", format(summary(lin.reg)$adj.r.squared, digits=3)))
                                   legend("top", bty="n", legend=paste("Pearson r: ", plot.corr))
                                  
                                   text(all.data.for.scatter[,j], all.data.for.scatter[,2], labels=all.data.for.scatter[,3], cex= 0.7, pos=3)
                      
                      } #end dev plots
                                            
                      dev.off()              
                            
		         } # end n row in row.of.interest
		     } #end scanning GRZM.ID.vectors
    } #end QTL identification
 } #end cSI loop 
