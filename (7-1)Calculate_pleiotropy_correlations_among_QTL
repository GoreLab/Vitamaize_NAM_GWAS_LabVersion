rm(list = ls())
#saved in cbk files as: Assess_Pleiotropy_Identify_Genes_in_Common_QTL_Support_Intervals_Non_Sig_Correl_Included_Too_cbk.r


###Required files:
### (1) pop by marker effect estimates
### (2) transformed BLUEs
### (3) imputedMarkers.allchr.0.1cm.final.Panzea.consolidated.B.txt (GBS SNPs)
### (4) JL results in tabular summary - current version organized by QTL left bound, preferably with common.SI tracker 


###Output generated:
### (1) "Results_from",trait.1,"JL.Model.txt", which are sublists of trait QTL
### (2) "Results_from",trait.2,"fitted.to.",trait.1,".Markers.txt", which are effect estimates from regression of trait.2 data onto trait.1 markers
### (3) ",trait.1,".QTL","that.are.pleiotropic.with", trait.2,".csv", which contains the correlation of original (trait.1 data onto trait.1 markers) and refit (trait.2 data onto trait.1 markers) effect estimates


#Important comment to read around line 141 regarding significance threshold - depends on type of analysis being run

###############################################################################
pleiotropy.calculator.within.supp.int <- function(trait.1, trait.2, threshold, validation = FALSE){
      #Written by Alex Lipka 12/14/2013
       #CBK inserted
      setwd("C:\\Users\\ceb19\\Documents\\Gore Lab\\Carotenoid NAM Merged Env")
      home.dir <- getwd()
      
      for(counter in 1:2){
      #Read in the results for Trait 1.

      setwd(paste(home.dir, "\\(14)Pleiotropy\\Pleiotropy_Analysis_SI01\\", sep = ""))
       Results.trait.1 <- read.table(paste("Pop.by.Marker.Effect.Estimates.from.R.",
                                     trait.1, ".SI01.txt", sep = ""), head = TRUE)
      
      if(validation){
         write.table(Results.trait.1, paste(home.dir,"\\(14)Pleiotropy\\Pleiotropy_Analysis_SI01\\Pleio_Validation_All_Sig_Test\\Results_from",trait.1,"JL.Model.txt",
                      sep = ""), sep = "\t", row.names = FALSE, quote = FALSE)
      }
      
      markers.in.trait.1 <- unique(substr(as.character(Results.trait.1[,1]), 7, nchar(as.character(Results.trait.1[,1]))))
      
      #Read in the phenotypic values for Trait 2
      
      pheno.data <- read.table(paste(home.dir, "\\(14)Pleiotropy\\PermPhen_", trait.2,"_BLUE_outtrans.txt", sep = ""), head = TRUE)
      colnames(pheno.data) <- c("Geno_Code", trait.2)
      
      setwd(home.dir)
      
      
      ###################################
      #Fit the markers from Trait 1 to Trait 2
      #Parse out all of the SNPs that were selected in the model
      geno.reduced <- genotypes[which(genotypes[,1] %in% markers.in.trait.1),-c(2:5)]
      geno.reduced.formatted <-as.data.frame(t(geno.reduced[,-1]))
      colnames(geno.reduced.formatted) <- as.character(t(geno.reduced[,1]))
      
      
      #pheno.data will always have more data becuase IBM is included in the phenotypic data.
      
      geno.and.pheno <- merge(pheno.data, geno.reduced.formatted, by.x = "Geno_Code", by.y = "row.names")
      
      #Add a population column
      geno.and.pheno <- cbind(geno.and.pheno[,1], as.factor(substr(as.character(geno.and.pheno[,1]), start = 3, stop = 4)), geno.and.pheno[,c(2:ncol(geno.and.pheno))])
      colnames(geno.and.pheno)[2] <- "pop"
      
      
      base.model <- paste(trait.2, " ~ pop+",sep = "")
      for(k in markers.in.trait.1){
        base.model <- paste(base.model,"+pop:",k,sep = "")
      } #end for(k in 4:ncol(geno.and.pheno))
      
      #JL.model <- lm(AT ~ pop+pop:S_38836669, data = geno.and.pheno) 
      JL.model <- lm(paste(base.model, sep = ""), data = geno.and.pheno) 
      
      effects.trait.2.fitted.to.trait.1.markers <- summary(JL.model)$coefficients[-c(1:25),]
      
      if(validation){
         write.table(effects.trait.2.fitted.to.trait.1.markers, paste(home.dir,"\\(14)Pleiotropy\\Pleiotropy_Analysis_SI01\\Pleio_Validation_All_Sig_Test\\Results_from",trait.2,"fitted.to.",trait.1,".Markers.txt", sep = ""), sep = "\t", row.names = TRUE, quote = FALSE)
      }
      
      
      head(effects.trait.2.fitted.to.trait.1.markers)
      
      #Perform the FDR procedure on the P-values from effects.trait.2.fitted.to.trait.1
       res <- mt.rawp2adjp(effects.trait.2.fitted.to.trait.1.markers[,4], "BH")
       adjp <- res$adjp[order(res$index), ]
       
       effects.trait.2.fitted.to.trait.1.markers <- cbind(effects.trait.2.fitted.to.trait.1.markers, adjp[,2])
       colnames(effects.trait.2.fitted.to.trait.1.markers)[5] <- "FDR_Adjusted_P-values"
      
      
      #########################
      #Within each marker, calculate the correlation between the effect estimates
      
      #Object names: effects.trait.2.fitted.to.trait.1.markers  Results.trait.1
      
      #Check to see if the pop*marker effects in each row are equal. If not, break out of the loop
      if(length(which(Results.trait.1[,1] != rownames(effects.trait.2.fitted.to.trait.1.markers))) > 0){
          print(paste("When ", trait.2, " was fitted with the effects of ", trait.1, " the pop.marker terms did not match up", sep = ""))
          break
      }                                         
      

      
      #Obtain separate pop and marker terms
      pop.terms <- substr(as.character(Results.trait.1[,1]), 1, 5)
      marker.terms <- substr(as.character(Results.trait.1[,1]), 7, nchar(as.character(Results.trait.1[,1])))
      
      cor.results <- NULL
      #For loop to cycle through the markers identified
      for(i in unique(marker.terms)){
        #In both data sets parse out only effects from the identified marker
        Results.trait.1.subset <- Results.trait.1[which(marker.terms == i), 1:2]
        Results.trait.1.subset[,1] <- as.character(Results.trait.1.subset[,1])
        effects.trait.2.fitted.to.trait.1.markers.subset <-   effects.trait.2.fitted.to.trait.1.markers[which(marker.terms == i), 1]
        
        data.for.correl <- merge(as.data.frame(Results.trait.1.subset), as.data.frame(effects.trait.2.fitted.to.trait.1.markers.subset),
                                 by.x = "Term", by.y = "row.names")
        
        #Calculate Pearson correlation coefficient, the P-value from the F statistic and append the results.
        correl <- cor(data.for.correl[,2], data.for.correl[,3])
        dfr <- nrow(Results.trait.1.subset) - 2
        r2 <- correl^2
        Fstat <- r2 * dfr / (1 - r2)
        P.val <- 1 - pf(Fstat, 1, dfr)
        cor.results <- rbind(cor.results, c(i, genotypes[which(as.character(genotypes[,1]) == i  ),3],  
                             genotypes[which(as.character(genotypes[,1]) == i  ),4], correl, P.val))
        }#end  for(i in unique(marker.terms))
        
      
       colnames(cor.results) <- c("Peak_SNP", "Chr", "bp", "Correlation_Coefficient", "P_value_from_F_Statistic")
      
       #write.table(cor.results, paste(home.dir,"//Pleiotropy_Investigation\\Correl.between.pop.marker.from.",trait.1,".in.",
       #            trait.1, ".vs.", trait.2,".txt", sep = ""), sep = "\t", row.names = FALSE, quote = FALSE)
       
       
       
       #Print out the number of QTL with P-values > 0.05
       p.values.cor.results <- as.numeric(as.vector(cor.results[,5]))
       
       
       #####EXTREMELY IMPORTANT
       #### Uncomment next line if all results are desired with specified significance threshold, removing all markers that have P-value < the threshold
       #cor.results.signif <- as.matrix(cor.results[which(p.values.cor.results < threshold),])        
       cor.results.signif <- as.matrix(cor.results)
       
       #if(length(cor.results.signif) == 5) cor.results.signif <- t(cor.results.signif)            ### Removed use of this line
       
       
       if( (length(cor.results.signif)>0) ){ 
        #Get only the JL results for only trait.1
        JL.Results.trait.1 <- JL.Results[which(JL.Results[,1] == trait.1),]
      
        #Adding additional QTL information
      
        #Gene.list <- NULL
        Left.supp.int <- NULL
        Right.supp.int <- NULL
        PVE <- NULL
        for(i in as.factor(cor.results.signif[,1])){ #used to be as.factor
            #Gene.list <- c(Gene.list, as.character(JL.Results.trait.1[which(JL.Results.trait.1[,6] == i),9]))
            Left.supp.int  <- c(Left.supp.int, as.character(JL.Results.trait.1[which(JL.Results.trait.1[,6] == i),4]))
            Right.supp.int  <- c(Right.supp.int, as.character(JL.Results.trait.1[which(JL.Results.trait.1[,6] == i),5]))
            PVE  <- c(PVE, as.character(JL.Results.trait.1[which(JL.Results.trait.1[,6] == i),8]))      
        } # end for(i in as.factor(cor.results.signif[,1]))
      
        #cor.results.signif <- cbind(cor.results.signif, Left.supp.int, Right.supp.int, PVE, Gene.list)
        cor.results.signif <- cbind(cor.results.signif, Left.supp.int, Right.supp.int, PVE)
      
        write.table(cor.results.signif, paste(home.dir,"\\(14)Pleiotropy\\Pleiotropy_Analysis_SI01\\Pleio_Investigation_All_Sig_Test\\",trait.1,".QTL",
                     "that.are.pleiotropic.with", trait.2,".csv", sep = ""), row.names = FALSE, sep = ",",  quote = FALSE)
        }#end if(nrow(cor.results.signif)>0)
      
      #Swap the traits
      old.trait.1 <- trait.1
      old.trait.2 <- trait.2
      
      trait.1 <- old.trait.2
      trait.2 <- old.trait.1
      
      counter <- counter + 1
      
      } #end for(counter in 1:2)
      
      
}###End pleiotropy calculator





###############################################################################


library(multtest)

setwd("C:\\Users\\ceb19\\Documents\\Gore Lab\\Carotenoid NAM Merged Env")
home.dir <- getwd()

#Read in the gneotypic data
setwd(paste(home.dir, "\\(9)JL Analysis\\Permutations\\GBS_SNPs\\", sep = ""))
genotypes <- read.table("imputedMarkers.allchr.0.1cm.final.Panzea.consolidated.B.txt", head = TRUE)
setwd(home.dir)

#Read in the sheet of JL Results
setwd(paste(home.dir, "\\(16)Generating Robust Files for Group Review\\Generating overlapping support intervals\\", sep = ""))
JL.Results <- read.table("Tab_Sum_Carot_alpha_0.01_20140603_for_Pleio_Script_Comps_Only.txt", head = TRUE)
setwd(home.dir)

#trait.multicollinearity <- c("DT3", "AT3", "TOTAL_TOCOCHROMANOLS", "DT3_BY_AT3") #Not needed anymore because we are using alpha = 0.01 threshold
#BLUE.or.BLUP <- "BLUE"  #Options are "BLUE" and "BLUP"
 
#Estimate Pleiotropy

#traits <- c("ACAR", "BCAR", "BCRY", "LUT", "PHYF", "THLYC", "TOTCAR", "ZEA", "ZEI")

traits <- c("ACAR_RUV", "BCAR_RUV", "BCRY_RUV", "LUT_RUV", "PHYF_RUV", "THLYC_RUV", "TOTCAR_RUV", "ZEA_RUV", "ZEI_RUV")


#for(p in 1:(length(traits)-1)){
  #for(q in (p+1):length(traits)) pleiotropy.calculator.within.supp.int(trait.1 = traits[p],trait.2 =  traits[q], threshold = 0.01, validation = FALSE)
#} # end  for(p in 1:(length(traits)-1))

for(p in 1:(length(traits)-1)){
  for(q in (p+1):length(traits)) pleiotropy.calculator.within.supp.int(trait.1 = traits[p],trait.2 =  traits[q], threshold = 0.01, validation = TRUE)
} # end  for(p in 1:(length(traits)-1))

