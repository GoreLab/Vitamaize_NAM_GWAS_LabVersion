
#get full (canonical) path to the script location
script_f=$(readlink -enq ${0});
script_d=$(dirname ${script_f});


#================================
# ANALYSIS DEFAULT PARAMETERS
#++++++++++++++++++++++++++++++++

#Total number of permutations
#Default: 1000
max_perm='1000'

#Map resolution to use (in centimorgans)
#Default: 0.1
res='0.1'

#Total number of chromosomes to process
#Default: 10
nr_chr='10'

#Starting chromosome number
#Default: 1
start_chr='1'

#=================================
# ANALYSIS DATA I/O
#+++++++++++++++++++++++++++++++++

#Input directory (where the input data is found)
#Default: data_input in parent directory of the script
in_d="${script_d}/../data_input"

#Output directory (where the gwas results will be saved)
#One sub-folder will be created for each trait
#Default: 'analysis_output' in parent directory of the script
out_d="${script_d}/../analysis_output"

#Templates for input file names, using ##res## and ##chr## to indicate resolution and chromosome 
#These are used to create the file names given a chromosome and resolution
#
#Examples:
#
#Template for Imputed_0.1cm_chr1_clean.txt 
#is Imputed_##res##cm_chr##chr##_clean.txt
#
#Template for gwas_snps_union_chr1.h1.h2_minors_indels.cnv_genic_2kwin_500bpbin.20130605.txt 
# is gwas_snps_union_chr##chr##.h1.h2_minors_indels.cnv_genic_2kwin_500bpbin.20130605.txt
#
#Template for Imputed_0.1cm_master.txt
#is Imputed_##res##cm_master.txt
#
#Template for d2a_perm10.txt
#is d2a_perm##perm##.txt

rils_t='Imputed_##res##cm_chr##chr##_clean.txt'
founders_t='gwas_snps_union_chr##chr##.h1.h2_minors_indels.cnv_genic_2kwin_500bpbin.20130605.txt'
map_t='Imputed_##res##cm_master.txt'
perm_t='perm##perm##.txt'


#================================
# TASSEL ENVIRONMENT
#++++++++++++++++++++++++++++++++

#Tassel directory location
#Default: tassel4-updated in same directory as the script
tassel_d="${script_d}/tassel4-updated"

#Tassel libraries folder name
#Must be in the ${tassel_d} folder
#Default: lib
lib_d='lib'

#Tassel jar file name
#Must be in the ${tassel_d} folder
#Default: tassel4.jar
tassel_jar='tassel4.jar'


# VARIABLES TO BE PASSED TO TASSEL
#--------------------------------
# 'enterlimit'
#Default: 1
enterlimit='1'

# 'iterations'
#Default: 1
iterations='1'

# 'maxsnps'
#Default: 1
maxsnps='1'
#--------------------------------


#================================
# RUNTIME ENVIRONMENT
#++++++++++++++++++++++++++++++++

#Permutation batch size, as a function of available processors
#Default: 2 concurent permutations per available processor
perm_per_proc='2'

#Java heap starting memory (Gb)
#Default: 1
Xms='1'

#Java heap max memory (Gb)
#Default: 5
Xmx='5'

#try to read total memory and nr of processors available
gb_RAM=$(echo "scale=0;($(free|awk '/^Mem:/{print $2}')/(1024*1024))"|bc -l) #amount of RAM on the system
sys_proc_nr=$(grep -c ^processor /proc/cpuinfo 2>/dev/null || sysctl -n hw.ncpu) #nr of processors available

#Set the number of available processors
#Default: all but one of available processors, or 1 if it failed to read proc nr
if [ -n "$sys_proc_nr" ]
then
    nr_proc=$[${sys_proc_nr} - 1]
else
    nr_proc='1'
fi

#Set max ram use (Gb); If any part of the run exceeds this value, it will terminate
#Default: 75% of GB of RAM currently present, or 10GB if it failed to read total memory
#
# NOTE: On some systems, there is already a hard memory limit per process 
#       You can see this limit value (in KB) by typing `ulimit -H -v` at the bash prompt
#       The scripts will set the memory limit to the lower of your value and the hard limit
if $gb_ram
then
    max_ram=$[ (${gb_RAM} * 3)/4 ]
else
    max_ram='10'
fi

